# 値の変換 ---
# 普通に変換（ビルドイン変換）
# 自分で変換関数を書く

# 型を作る ---
# typedef 型の別名
# struct 構造体(class)
# -(name):inherit {
# (x)int
# }

# int、string の基本型を継承する場合、メンバ変数を持てない

# int, string -- 純粋な型

# 型システム完成

# if for 配列 プリプロセッサ

<web.xal>
@ (foo (s)int)
{
    return (+ s 33)
}

-(numbtn):Button {
    (num)int
    @ (set_num (i)int) {
        .num = i
        .text = (i)string
    }

    @ (click) {
#        .num = 0
        .text = (+ 1 .num)string
    }
}

(i)int
+(btn)Button
btn.text = 'きよみ'
@ (btn.hover) {
    btn.text = 'きよみが押しました'
}

# +(btn1)numbtn
# +(btn2)Button
# @ (btn2.click) {
    
# }

end


