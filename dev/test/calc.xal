<'list.xal'>
<'web.xal'>
<'math.xal'>

(mode)int
(using_operation)string
(lOperators)string
lOperators = (licon lOperators '+')
lOperators = (licon lOperators '-')
lOperators = (licon lOperators '*')
lOperators = (licon lOperators '/')

+(main)Div
+(num1)Div
+(num2)Div
+(num3)Div
+(operators)Div
+(view)Letter in main
view.text = '0'
mode = 0

@ (parse (str)string) {
    (words)string
    (ofs)int
    (j)int
    loop {
        (tmpofs)int
        tmpofs = ofs
        # 最大数文字
        ofs = 100000 
        (i)int
        loop {
            (opridx)int
            opridx = (stridx str (liat lOperators i) tmpofs)
            (not (eq opridx -1)) ? {
                ofs = (min ofs opridx)
            }
            i = (+ i 1)
            (eq i (lilen lOperators)) ? {
                escape
            }
        }
        (eq ofs 100000) ? {
            words = (licon words (substr str (- tmpofs 1)))
            escape
        }
        # tmpofsを調整して「符号+数字」が入るようにする
        (eq tmpofs 0) ? {
            tmpofs = 0
        }
        branch true ? {
            tmpofs = (- tmpofs 1)
        }
        words = (licon words (substr str tmpofs (- ofs tmpofs)))
        ofs = (+ 1 ofs)
    }
    # めんどくさいので、0番目の要素の最初にスペースを入れて調整
    words = (lialt words 0 (concat ' ' (liat words 0)))
    # 0:32|1:+21|2:+14|3:*21|
    i = 0
    loop {
        (eq (strat (liat words i) 0) '*') ? {
            # 掛け算が見つかった場合、前の要素の数字を取得してこの要素
            # の数字と掛け合わせる。この要素を削除して前の要素の内容を
            # 演算結果に変更する。
            (a)int
            a = (substr (liat words (- i 1)) 1)int
            (b)int
            (eq (strlen (liat words i)) 1) ? {
                # この場合計算すべき数字は次の要素に入っているのでそれを取得
                b = (liat words (+ i 1))int
                words = (lidel words (+ i 1))
            }
            branch true ? {
                b = (substr (liat words i) 1)int
            }
            (ans)int
            ans = (* a b)
            words = (lidel words i)
            words = (lialt words (- i 1) (concat (strat (liat words (- i 1)) 0) (ans)string))
            i = (- i 1)
        }
        (eq (strat (liat words i) 0) '/') ? {
            # 掛け算が見つかった場合、前の要素の数字を取得してこの要素
            # の数字と掛け合わせる。この要素を削除して前の要素の内容を
            # 演算結果に変更する。
            (a)int
            a = (substr (liat words (- i 1)) 1)int
            (b)int
            (eq (strlen (liat words i)) 1) ? {
                # この場合計算すべき数字は次の要素に入っているのでそれを取得
                b = (liat words (+ i 1))int
                words = (lidel words (+ i 1))
            }
            branch true ? {
                b = (substr (liat words i) 1)int
            }
            (ans)int
            ans = (/ a b)
            words = (lidel words i)
            words = (lialt words (- i 1) (concat (strat (liat words (- i 1)) 0) (ans)string))
            i = (- i 1)
        }
        i = (+ i 1)
        (>= i (lilen words)) ? {
            escape
        }
    }
    i = 0
    loop {
        (eq (strat (liat words i) 0) '+') ? {
            (a)int
            a = (substr (liat words (- i 1)) 1)int
            (b)int
            b = (substr (liat words i) 1)int
            (ans)int
            ans = (+ a b)
            words = (lidel words i)
            words = (lialt words (- i 1) (concat (strat (liat words (- i 1)) 0) (ans)string))
            i = (- i 1)
        }
        (eq (strat (liat words i) 0) '-') ? {
            (a)int
            a = (substr (liat words (- i 1)) 1)int
            (b)int
            b = (substr (liat words i) 1)int
            (ans)int
            ans = (- a b)
            words = (lidel words i)
            words = (lialt words (- i 1) (concat (strat (liat words (- i 1)) 0) (ans)string))
            i = (- i 1)
        }
        i = (+ i 1)
        (>= i (lilen words)) ? {
            escape
        }
    }
    return (liat words 0)string
}

+(plus_btn)Button in operators
plus_btn.text = '+'
plus_btn.disabled = true

+(product_btn)Button in operators
product_btn.text = '*'
product_btn.disabled = true

+(mi_btn)Button in operators
mi_btn.text = '-'
mi_btn.disabled = true

+(divid_btn)Button in operators
divid_btn.text = '/'
divid_btn.disabled = true

+(ac_btn)Button in operators
ac_btn.text = 'AC'
@ (ac_btn.click) {
    view.text = '0'
    mode = 0
}

+(ce_btn)Button in operators
ce_btn.text = 'CE'
@ (ce_btn.click) {
    # TODO 複数文字列関数が出てきたときには対応する
    # NOTE 直前の文字を一つ消すだけ
    view.text = (strdel view.text (- (strlen view.text) 1) 1)
#    mode = 0
}

+(point_btn)Button in operators
point_btn.text = '.'
@ (point_btn.click) {
    view.text = (concat view.text '.')
}

-(numbtn):Button {
    (num)int
    @ (set_num (num)int) {
        .num = num
        .text = (num)string
    }
    @ (click) {
        # 文字を後ろにくっつける
        (eq view.text '0') ? {
            view.text = ''
        }
        view.text = (concat view.text (.num)string)
        mode = 1

        plus_btn.disabled = false
        product_btn.disabled = false
        mi_btn.disabled = false
        divid_btn.disabled = false
    }
}

+(button9)numbtn in num1
(button9.set_num 9)
+(button8)numbtn in num1
(button8.set_num 8)
+(button7)numbtn in num1
(button7.set_num 7)
+(button6)numbtn in num2
(button6.set_num 6)
+(button5)numbtn in num2
(button5.set_num 5)
+(button4)numbtn in num2
(button4.set_num 4)
+(button3)numbtn in num3
(button3.set_num 3)
+(button2)numbtn in num3
(button2.set_num 2)
+(button1)numbtn in num3
(button1.set_num 1)
+(button0)numbtn in num3
(button0.set_num 0)

@ (plus_btn.click) {
    (eq mode 1) ? {
        (limatchstr lOperators (strat view.text (- (strlen view.text) 1))) ? {
            # 前の文字が記号の場合は記号を置換
            view.text = (strdel view.text -1 1)
        }
        view.text = (concat view.text '+')
        using_operation = '+'
    }
}

@ (product_btn.click) {
    (limatchstr lOperators (strat view.text (- (strlen view.text) 1))) ? {
        view.text = (strdel view.text -1 1)
    }
    (eq mode 1) ? {
        view.text = (concat view.text '*')
        using_operation = '*'
    }
}

@ (mi_btn.click) {
    (prev_char)string
    prev_char = (strat view.text (- (strlen view.text) 1))
    (limatchstr lOperators prev_char) ? {
        (not (or (eq prev_char '*') (eq prev_char '/'))) ? {
            view.text = (strdel view.text -1 1)
        }
    }
    (eq mode 1) ? {
        view.text = (concat view.text '-')
        using_operation = '-'
    }
}

@ (divid_btn.click) {
    (limatchstr lOperators (strat view.text (- (strlen view.text) 1))) ? {
        view.text = (strdel view.text -1 1)
    }
    (eq mode 1) ? {
        view.text = (concat view.text '/')
        using_operation = '/'
    }
}

+(eq_btn)Button in operators
eq_btn.text = '='
@ (eq_btn.click) {
    (eq mode 1) ? {
        (ans)string
        ans = (parse view.text)
        view.text = (concat view.text ' = ' ans)
    }
}

end
