<'list.xal'>
<'web.xal'>


@ (negative (i)int) {
    return (- 0 i)
}

(mode)int
(using_operation)string
# using_operation = (licon '+')
# using_operation = (licon '-')
# using_operation = (licon '*')
# using_operation = (licon '/')

+(main)Div
+(num1)Div
+(num2)Div
+(num3)Div
+(operators)Div
+(view)Letter in main
view.text = '0'
mode = 0

+(plus_btn)Button in operators
plus_btn.text = '+'
plus_btn.disabled = true

+(product_btn)Button in operators
product_btn.text = '*'
product_btn.disabled = true

+(mi_btn)Button in operators
mi_btn.text = '-'
mi_btn.disabled = true

+(divid_btn)Button in operators
divid_btn.text = '/'
divid_btn.disabled = true

+(ac_btn)Button in operators
#ac_btn.text = 'AC'
(fruits)string

fruits = '0:apple|1:banana|8:grapes|'
# fruits = (lialt fruits 0 'peach')
fruits = (lireindex fruits)
ac_btn.text = fruits
@ (ac_btn.click) {
    view.text = '0'
    mode = 0
}

-(numbtn):Button {
    (num)int
    @ (set_num (num)int) {
        .num = num
        .text = (num)string
    }
    @ (click) {
        # 文字を後ろにくっつける
        (eq view.text '0') ? {
            view.text = ''
        }
        view.text = (concat view.text (.num)string)
        mode = 1

        plus_btn.disabled = false
        product_btn.disabled = false
        mi_btn.disabled = false
        divid_btn.disabled = false
    }
}

+(button9)numbtn in num1
(button9.set_num 9)
+(button8)numbtn in num1
(button8.set_num 8)
+(button7)numbtn in num1
(button7.set_num 7)
+(button6)numbtn in num2
(button6.set_num 6)
+(button5)numbtn in num2
(button5.set_num 5)
+(button4)numbtn in num2
(button4.set_num 4)
+(button3)numbtn in num3
(button3.set_num 3)
+(button2)numbtn in num3
(button2.set_num 2)
+(button1)numbtn in num3
(button1.set_num 1)
+(button0)numbtn in num3
(button0.set_num 0)

@ (plus_btn.click) {
    (eq mode 1) ? {
        view.text = (concat view.text '+')
        mode = 0
        using_operation = '+'
    }
}

@ (product_btn.click) {
    (eq mode 1) ? {
        view.text = (concat view.text '*')
        mode = 0
        using_operation = '*'
    }
}

@ (mi_btn.click) {
    (eq mode 1) ? {
        view.text = (concat view.text '-')
        mode = 0
        using_operation = '-'
    }
}

@ (divid_btn.click) {
    (eq mode 1) ? {
        view.text = (concat view.text '/')
        mode = 0
        using_operation = '/'
    }
}

+(eq_btn)Button in operators
eq_btn.text = '='
@ (eq_btn.click) {
    (eq mode 1) ? {
        (ans)int
        # view.text = '62+41'
        (a)int
        (b)int
        a = (substr view.text 0 (stridx view.text using_operation))int
        b = (substr view.text (+ 1 (stridx view.text using_operation)) (negative 1))int
        cond (eq using_operation '+') ? {
            ans = (+ a b)
        }
        branch (eq using_operation '-') ? {
            ans = (- a b)
        }
        branch (eq using_operation '*') ? {
            ans = (* a b)
        }
        branch (eq using_operation '/') ? {
            ans = (/ a b)
        }
        view.text = (concat view.text '=' (ans)string)
        mode = 0

    }
}

end
